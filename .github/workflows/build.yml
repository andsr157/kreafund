name: Deploy Traefik

on:
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  IMAGE_NAME: kreafund-app
  ACTOR: ${{ github.actor }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.ACTOR }}
          password: ${{ secrets.GI_PAT }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:prod
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            NODE_ENV=production

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH and Docker Context
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GI_SSH_PRIVATE_KEY }}" > ~/.ssh/ssh_new.pem
          chmod 600 ~/.ssh/ssh_new.pem
          
          # Configure SSH
          echo "Host ${{ secrets.GI_DEPLOY_HOST }}" >> ~/.ssh/config
          echo "  HostName ${{ secrets.GI_DEPLOY_HOST }}" >> ~/.ssh/config
          echo "  User ${{ secrets.GI_DEPLOY_USER }}" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/ssh_new.pem" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Setup Docker Context
        run: |
          docker context create remote --docker "host=ssh://${{ secrets.GI_DOCKER_HOST }}" 
          docker context use remote

      - name: Deploy App
        run: |
          export DB_HOST="${{ secrets.GI_DB_HOST }}"
          export DB_USER="${{ secrets.GI_DB_USER }}"
          export DB_PASS="${{ secrets.GI_DB_PASSWORD }}"
          export DB_NAME="${{ secrets.GI_DB_NAME }}"
          export APP_BASE_URL="${{ secrets.GI_APP_BASE_URL }}"
         
        
          echo "${{ secrets.GI_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          docker compose -f compose.prod.yml pull

          docker compose -f compose.prod.yml up -d

      - name: Cleanup
        if: always()
        run: |
          docker context rm remote -f || true
          rm -f ~/.ssh/ssh_new.pem
